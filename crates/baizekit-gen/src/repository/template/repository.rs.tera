use std::sync::Arc;

use baizekit_derive::Curd;
use baizekit_seaorm::curd::*;
use baizekit_seaorm::sea_orm::entity::prelude::*;
use baizekit_seaorm::sea_orm::*;
use sea_orm::sea_query::OnConflict;
{% if use_domain_entity is defined %}
{{ use_domain_entity }}
{% endif %}

fn find_select_fn(filter: FindFilter) -> Select<Entity> {
    Entity::find()
}

fn search_select_fn(filter: SearchFilter) -> Select<Entity> {
    let mut select = Entity::find();

    select
}

impl From<{{ entity_name }}> for ActiveModel {
    fn from(value: {{ entity_name }}) -> Self {
        todo!()
    }
}

impl From<Model> for {{ entity_name }} {
    fn from(value: Model) -> Self {
        todo!()
    }
}

fn on_conflict_fn() -> OnConflict {
    todo!()
}

#[derive(Curd)]
#[curd(
    db_entity = Entity,
    domain_entity = {{ entity_name }},
    error = Error,
    find(filter = FindFilter, select_fn = find_select_fn),
    search(filter = SearchFilter, select_fn = search_select_fn),
    stream_search(filter = SearchFilter, select_fn = search_select_fn),
    insert,
    update,
    delete,
    bulk_insert,
    upsert(on_conflict_fn = on_conflict_fn),
    bulk_upsert(on_conflict_fn = on_conflict_fn),
)]
pub struct {{ entity_name }}RepositoryImpl {
    #[curd(db)]
    conn: Arc<DatabaseConnection>,
}

impl {{ entity_name }}Repository for {{ entity_name }}RepositoryImpl {}
